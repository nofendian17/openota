// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	state "github.com/nofendian17/openota/apigw/internal/delivery/rest/model/request/state"
	responsestate "github.com/nofendian17/openota/apigw/internal/delivery/rest/model/response/state"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, country
func (_m *UseCase) Create(ctx context.Context, country state.Create) error {
	ret := _m.Called(ctx, country)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.Create) error); ok {
		r0 = rf(ctx, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *UseCase) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UseCase) GetAll(ctx context.Context) ([]*responsestate.State, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*responsestate.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*responsestate.State, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*responsestate.State); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*responsestate.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCountryID provides a mock function with given fields: ctx, countryID
func (_m *UseCase) GetByCountryID(ctx context.Context, countryID string) ([]*responsestate.State, error) {
	ret := _m.Called(ctx, countryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCountryID")
	}

	var r0 []*responsestate.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*responsestate.State, error)); ok {
		return rf(ctx, countryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*responsestate.State); ok {
		r0 = rf(ctx, countryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*responsestate.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *UseCase) GetByID(ctx context.Context, ID string) (*responsestate.State, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *responsestate.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*responsestate.State, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *responsestate.State); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responsestate.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, country
func (_m *UseCase) Update(ctx context.Context, ID string, country state.Update) error {
	ret := _m.Called(ctx, ID, country)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, state.Update) error); ok {
		r0 = rf(ctx, ID, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
